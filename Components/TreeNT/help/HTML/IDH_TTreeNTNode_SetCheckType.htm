<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Time2HELP 1.0; Standard Template">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<TITLE>SetCheckType Method</TITLE>
<Style>Body, TD {font-family: "Verdana"; font-size: 10pt};
PRE {font-size: 10pt; margin-top: 0; margin-bottom: 0}</Style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BASEFONT NAME="verdana" Size="2">
<TABLE BGCOLOR="#FFFF00" BORDER="0" WIDTH="100%">
<TR>
<TD><Font Color="#000000F"><B>SetCheckType method</B></Font></TD></TR></Table><P><B>Applies to</B><Br><A HREF="IDH_Class_TTreeNTNode.htm">TTreeNTNode</A><P><B>Declaration</B><Br><Font Face="Courier New"><B>Procedure</B> SetCheckType(Value: <A HREF="IDH_Type_TCheckType.htm">TCheckType</A>);</Font><Font Color=#FF0000>
<H3>Implementation</H3></Font><table border="0" bgcolor="#FFFED9"> <tr> <td><pre><B>procedure</B> TTreeNTNode.SetCheckType(Value: <A HREF="IDH_Type_TCheckType.htm">TCheckType</A>);

<Font Color="#0000DD">// sets the check type for this node's children and changes the children's check image</Font>

<B>var</B> I : Integer;

<B>begin</B>
  <B>if</B> FCheckType &lt;&gt; Value <B>then</B>
  <B>begin</B>
    <B>case</B> Value <B>of</B>
      ctNone:
        <B>for</B> I := 0 <B>to</B> Count - 1 <B>do</B>
        <B>begin</B>
          Item[I].FCheckState := csUnchecked;
          TreeView.SetCheckImage(Item[I], ckEmpty);
        <B>end</B>;
      ctCheckBox:
        <B>begin</B>
          <B>for</B> I := 0 <B>to</B> Count - 1 <B>do</B>
          <B>if</B> Item[I].FCheckState = csChecked <B>then</B>
          <B>begin</B>
            <B>if</B> Item[I].Enabled <B>then</B> TreeView.SetCheckImage(Item[I], ckCheckChecked)
                               <B>else</B> TreeView.SetCheckImage(Item[I], ckCheckGrayed);
          <B>end</B>
          <B>else</B>
          <B>begin</B>
            <B>if</B> Item[I].Enabled <B>then</B> TreeView.SetCheckImage(Item[I], ckCheckEmpty)
                               <B>else</B> TreeView.SetCheckImage(Item[I], ckCheckDisabled);
          <B>end</B>;
        <B>end</B>;
      ctCheckBoxGrayed:
        <B>begin</B>
          FCheckState := csUnchecked;
          <B>for</B> I := 0 <B>to</B> Count - 1 <B>do</B>
            <B>if</B> Item[I].Enabled <B>then</B> TreeView.SetCheckImage(Item[I], ckCheckEmpty)
                               <B>else</B> TreeView.SetCheckImage(Item[I], ckCheckDisabled);
        <B>end</B>;
      ctRadioButton:
        <B>begin</B>
          <B>for</B> I := 0 <B>to</B> Count - 1 <B>do</B>
          <B>begin</B>
            Item[I].FCheckState := csUnchecked;
            <B>if</B> Item[I].Enabled <B>then</B> TreeView.SetCheckImage(Item[I], ckRadioEmpty)
                               <B>else</B> TreeView.SetCheckImage(Item[I], ckRadioDisabled);
          <B>end</B>;
          <Font Color="#0000DD">// find first enabled item to check it</Font>
          <B>for</B> I := 0 <B>to</B> Count - 1 <B>do</B>
            <B>if</B> Item[I].Enabled <B>then</B>
            <B>begin</B>
              TreeView.SetCheckImage(Item[I], ckRadioChecked);
              Item[I].FCheckState := csChecked;
              Break;
            <B>end</B>;
        <B>end</B>;
    <B>end</B>;
    FCheckType := Value;
  <B>end</B>;
<B>End</B>;</pre></td></tr></Table>